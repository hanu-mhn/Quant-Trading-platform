STDOUT:
============================= test session starts =============================
platform win32 -- Python 3.13.3, pytest-8.4.0, pluggy-1.6.0 -- d:\QUANT\QT_python\quant-trading-platform\.venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: d:\QUANT\QT_python\quant-trading-platform
plugins: anyio-4.9.0, dash-3.0.4, asyncio-1.0.0, cov-6.1.1
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 26 items

tests/test_backtesting.py::TestBacktester::test_analyze_results PASSED   [  3%]
tests/test_backtesting.py::TestBacktester::test_run_backtest PASSED      [  7%]
tests/test_live_trading.py::TestLiveTrader::test_start_trading FAILED    [ 11%]
tests/test_live_trading.py::TestLiveTrader::test_stop_trading PASSED     [ 15%]
tests/test_suite.py::TestTechnicalIndicators::test_bollinger_bands FAILED [ 19%]
tests/test_suite.py::TestTechnicalIndicators::test_exponential_moving_average PASSED [ 23%]
tests/test_suite.py::TestTechnicalIndicators::test_macd FAILED           [ 26%]
tests/test_suite.py::TestTechnicalIndicators::test_moving_average PASSED [ 30%]
tests/test_suite.py::TestTechnicalIndicators::test_rsi PASSED            [ 34%]
tests/test_suite.py::TestRiskManagement::test_position_size_calculator FAILED [ 38%]
tests/test_suite.py::TestRiskManagement::test_risk_metrics FAILED        [ 42%]
tests/test_suite.py::TestPortfolioManagement::test_portfolio_add_position FAILED [ 46%]
tests/test_suite.py::TestPortfolioManagement::test_portfolio_creation FAILED [ 50%]
tests/test_suite.py::TestPortfolioManagement::test_position_creation FAILED [ 53%]
tests/test_suite.py::TestPortfolioManagement::test_position_pnl FAILED   [ 57%]
tests/test_suite.py::TestDataLoader::test_data_validation FAILED         [ 61%]
tests/test_suite.py::TestDataLoader::test_load_csv_data PASSED           [ 65%]
tests/test_suite.py::TestDataProcessor::test_clean_ohlcv_data PASSED     [ 69%]
tests/test_suite.py::TestBacktester::test_backtest_engine_initialization FAILED [ 73%]
tests/test_suite.py::TestBacktester::test_backtest_execution FAILED      [ 76%]
tests/test_suite.py::TestStrategyIntegration::test_moving_average_strategy FAILED [ 80%]
tests/test_suite.py::TestConfigManagement::test_config_initialization PASSED [ 84%]
tests/test_suite.py::TestConfigManagement::test_config_values FAILED     [ 88%]
tests/test_utils.py::TestUtils::test_calculate_moving_average PASSED     [ 92%]
tests/test_utils.py::TestUtils::test_normalize_data PASSED               [ 96%]
tests/test_utils.py::TestUtils::test_split_data PASSED                   [100%]

================================== FAILURES ===================================
______________________ TestLiveTrader.test_start_trading ______________________

self = <tests.test_live_trading.TestLiveTrader testMethod=test_start_trading>

    def test_start_trading(self):
        self.broker.connect = Mock(return_value=True)
        result = self.trader.start_trading()
>       self.assertTrue(result)
E       AssertionError: False is not true

tests\test_live_trading.py:15: AssertionError
________________ TestTechnicalIndicators.test_bollinger_bands _________________

self = <tests.test_suite.TestTechnicalIndicators testMethod=test_bollinger_bands>

    def test_bollinger_bands(self):
        """Test Bollinger Bands indicator"""
        bb = BollingerBands(period=20, std_dev=2.0)
        result = bb.calculate(self.price_data)
    
>       self.assertIsInstance(result, dict)
E       AssertionError:             upper_band  middle_band  lower_band
E       2023-01-01         NaN          NaN         NaN
E       2023-01-02         NaN          NaN         NaN
E       2023-01-03         NaN          NaN         NaN
E       2023-01-04         NaN          NaN         NaN
E       2023-01-05         NaN          NaN         NaN
E       ...                ...          ...         ...
E       2023-04-06   91.611206    88.680370   85.749534
E       2023-04-07   91.430015    88.517890   85.605765
E       2023-04-08   91.273754    88.404975   85.536196
E       2023-04-09   91.052565    88.284150   85.515735
E       2023-04-10   91.014223    88.321730   85.629237
E       
E       [100 rows x 3 columns] is not an instance of <class 'dict'>

tests\test_suite.py:121: AssertionError
______________________ TestTechnicalIndicators.test_macd ______________________

self = <tests.test_suite.TestTechnicalIndicators testMethod=test_macd>

    def test_macd(self):
        """Test MACD indicator"""
        macd = MACD(fast_period=12, slow_period=26, signal_period=9)
        result = macd.calculate(self.price_data)
    
>       self.assertIsInstance(result, dict)
E       AssertionError:                 macd    signal  histogram
E       2023-01-01  0.000000  0.000000   0.000000
E       2023-01-02 -0.003961 -0.002200  -0.001760
E       2023-01-03  0.038148  0.014336   0.023812
E       2023-01-04  0.171333  0.067519   0.103814
E       2023-01-05  0.224797  0.114306   0.110491
E       ...              ...       ...        ...
E       2023-04-06  0.314339  0.492421  -0.178081
E       2023-04-07  0.155368  0.425010  -0.269642
E       2023-04-08  0.072230  0.354454  -0.282224
E       2023-04-09  0.013969  0.286357  -0.272388
E       2023-04-10 -0.057651  0.217556  -0.275206
E       
E       [100 rows x 3 columns] is not an instance of <class 'dict'>

tests\test_suite.py:104: AssertionError
______________ TestRiskManagement.test_position_size_calculator _______________

self = <tests.test_suite.TestRiskManagement testMethod=test_position_size_calculator>

    def test_position_size_calculator(self):
        """Test position sizing calculations"""
        calc = PositionSizeCalculator()
    
        # Test fixed fractional sizing
>       position_size = calc.calculate_position_size(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            account_balance=self.account_balance,
            risk_per_trade=self.risk_per_trade,
            entry_price=self.entry_price,
            stop_loss=self.stop_loss,
            method='fixed_fractional'
        )
E       AttributeError: 'PositionSizeCalculator' object has no attribute 'calculate_position_size'

tests\test_suite.py:151: AttributeError
____________________ TestRiskManagement.test_risk_metrics _____________________

self = <tests.test_suite.TestRiskManagement testMethod=test_risk_metrics>

    def test_risk_metrics(self):
        """Test risk metrics calculations"""
        metrics = RiskMetrics()
    
        # Test Sharpe ratio
>       sharpe = metrics.calculate_sharpe_ratio(self.returns)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'RiskMetrics' object has no attribute 'calculate_sharpe_ratio'

tests\test_suite.py:168: AttributeError
_____________ TestPortfolioManagement.test_portfolio_add_position _____________

self = <tests.test_suite.TestPortfolioManagement testMethod=test_portfolio_add_position>

    def test_portfolio_add_position(self):
        """Test adding position to portfolio"""
        portfolio = Portfolio(initial_cash=self.initial_cash)
    
        # Add position
>       portfolio.add_position(
        ^^^^^^^^^^^^^^^^^^^^^^
            symbol=self.symbol,
            quantity=self.quantity,
            price=self.price
        )
E       AttributeError: 'Portfolio' object has no attribute 'add_position'

tests\test_suite.py:237: AttributeError
_______________ TestPortfolioManagement.test_portfolio_creation _______________

self = <tests.test_suite.TestPortfolioManagement testMethod=test_portfolio_creation>

    def test_portfolio_creation(self):
        """Test portfolio creation"""
        portfolio = Portfolio(initial_cash=self.initial_cash)
    
        self.assertEqual(portfolio.cash, self.initial_cash)
        self.assertEqual(len(portfolio.positions), 0)
>       self.assertEqual(portfolio.total_value, self.initial_cash)
                         ^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'Portfolio' object has no attribute 'total_value'. Did you mean: 'get_total_value'?

tests\test_suite.py:230: AttributeError
_______________ TestPortfolioManagement.test_position_creation ________________

self = <tests.test_suite.TestPortfolioManagement testMethod=test_position_creation>

    def test_position_creation(self):
        """Test position creation and management"""
>       position = Position(
            symbol=self.symbol,
            quantity=self.quantity,
            entry_price=self.price,
            entry_time=datetime.now()
        )
E       TypeError: Position.__init__() got an unexpected keyword argument 'entry_price'

tests\test_suite.py:196: TypeError
__________________ TestPortfolioManagement.test_position_pnl __________________

self = <tests.test_suite.TestPortfolioManagement testMethod=test_position_pnl>

    def test_position_pnl(self):
        """Test position P&L calculation"""
>       position = Position(
            symbol=self.symbol,
            quantity=self.quantity,
            entry_price=self.price,
            entry_time=datetime.now()
        )
E       TypeError: Position.__init__() got an unexpected keyword argument 'entry_price'

tests\test_suite.py:210: TypeError
_____________________ TestDataLoader.test_data_validation _____________________

self = <tests.test_suite.TestDataLoader testMethod=test_data_validation>

    def test_data_validation(self):
        """Test data validation"""
        # Test valid data
>       is_valid = self.loader.validate_ohlcv_data(self.sample_data)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'DataLoader' object has no attribute 'validate_ohlcv_data'

tests\test_suite.py:281: AttributeError
---------------------------- Captured stdout call -----------------------------
Configuration loaded from src\config\config.yaml
_____________ TestBacktester.test_backtest_engine_initialization ______________

self = <tests.test_suite.TestBacktester testMethod=test_backtest_engine_initialization>

    def setUp(self):
        """Set up test data"""
        # Create sample price data
        dates = pd.date_range('2023-01-01', periods=252, freq='D')
        np.random.seed(42)
    
        base_price = 100
        returns = np.random.normal(0.0005, 0.01, 252)  # Slight positive drift
        prices = [base_price]
    
        for ret in returns[1:]:
            prices.append(prices[-1] * (1 + ret))
    
        self.price_data = pd.DataFrame({
            'open': pd.Series(prices) * (1 + np.random.normal(0, 0.001, 252)),
            'high': pd.Series(prices) * (1 + abs(np.random.normal(0, 0.005, 252))),
            'low': pd.Series(prices) * (1 - abs(np.random.normal(0, 0.005, 252))),
            'close': pd.Series(prices),
            'volume': np.random.randint(1000, 10000, 252)
        }, index=dates)
    
        # Create a simple test strategy
>       self.strategy = MovingAverageCrossoverStrategy(
            short_window=10,
            long_window=20
        )
E       TypeError: Can't instantiate abstract class MovingAverageCrossoverStrategy without an implementation for abstract method 'calculate_position_size'

tests\test_suite.py:358: TypeError
___________________ TestBacktester.test_backtest_execution ____________________

self = <tests.test_suite.TestBacktester testMethod=test_backtest_execution>

    def setUp(self):
        """Set up test data"""
        # Create sample price data
        dates = pd.date_range('2023-01-01', periods=252, freq='D')
        np.random.seed(42)
    
        base_price = 100
        returns = np.random.normal(0.0005, 0.01, 252)  # Slight positive drift
        prices = [base_price]
    
        for ret in returns[1:]:
            prices.append(prices[-1] * (1 + ret))
    
        self.price_data = pd.DataFrame({
            'open': pd.Series(prices) * (1 + np.random.normal(0, 0.001, 252)),
            'high': pd.Series(prices) * (1 + abs(np.random.normal(0, 0.005, 252))),
            'low': pd.Series(prices) * (1 - abs(np.random.normal(0, 0.005, 252))),
            'close': pd.Series(prices),
            'volume': np.random.randint(1000, 10000, 252)
        }, index=dates)
    
        # Create a simple test strategy
>       self.strategy = MovingAverageCrossoverStrategy(
            short_window=10,
            long_window=20
        )
E       TypeError: Can't instantiate abstract class MovingAverageCrossoverStrategy without an implementation for abstract method 'calculate_position_size'

tests\test_suite.py:358: TypeError
____________ TestStrategyIntegration.test_moving_average_strategy _____________

self = <tests.test_suite.TestStrategyIntegration testMethod=test_moving_average_strategy>

    def test_moving_average_strategy(self):
        """Test moving average crossover strategy"""
>       strategy = MovingAverageCrossoverStrategy(short_window=5, long_window=20)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: Can't instantiate abstract class MovingAverageCrossoverStrategy without an implementation for abstract method 'calculate_position_size'

tests\test_suite.py:419: TypeError
___________________ TestConfigManagement.test_config_values ___________________

self = <tests.test_suite.TestConfigManagement testMethod=test_config_values>

    def test_config_values(self):
        """Test configuration values"""
        config = Config()
    
        # Test some default values
        self.assertGreater(config.backtest.initial_capital, 0)
>       self.assertGreater(config.risk.max_position_size, 0)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'RiskConfig' object has no attribute 'max_position_size'

tests\test_suite.py:451: AttributeError
---------------------------- Captured stdout call -----------------------------
Configuration loaded from src\config\config.yaml
=========================== short test summary info ===========================
FAILED tests/test_live_trading.py::TestLiveTrader::test_start_trading - Asser...
FAILED tests/test_suite.py::TestTechnicalIndicators::test_bollinger_bands - A...
FAILED tests/test_suite.py::TestTechnicalIndicators::test_macd - AssertionErr...
FAILED tests/test_suite.py::TestRiskManagement::test_position_size_calculator
FAILED tests/test_suite.py::TestRiskManagement::test_risk_metrics - Attribute...
FAILED tests/test_suite.py::TestPortfolioManagement::test_portfolio_add_position
FAILED tests/test_suite.py::TestPortfolioManagement::test_portfolio_creation
FAILED tests/test_suite.py::TestPortfolioManagement::test_position_creation
FAILED tests/test_suite.py::TestPortfolioManagement::test_position_pnl - Type...
FAILED tests/test_suite.py::TestDataLoader::test_data_validation - AttributeE...
FAILED tests/test_suite.py::TestBacktester::test_backtest_engine_initialization
FAILED tests/test_suite.py::TestBacktester::test_backtest_execution - TypeErr...
FAILED tests/test_suite.py::TestStrategyIntegration::test_moving_average_strategy
FAILED tests/test_suite.py::TestConfigManagement::test_config_values - Attrib...
======================= 14 failed, 12 passed in 25.25s ========================


STDERR:


Return code: 1