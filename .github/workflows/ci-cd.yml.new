name: Trading Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy

    - name: Code formatting check
      run: |
        black --check --diff src/ tests/

    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/trading_platform_test
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python -c "import sys; print(sys.path)"
        echo "Current directory: $(pwd)"
        echo "File structure:"
        ls -la
        echo "Testing directory structure:"
        ls -la tests/
        echo "Running tests with verbose output:"
        pytest tests/ -v --tb=native --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        echo "Running Bandit security scan with configuration"
        bandit -r src/ -f json -o bandit-report.json -c .bandit.yaml || true
        
        # Echo the report content
        echo "Bandit report content:"
        cat bandit-report.json || echo "No report generated"

    - name: Run Safety check
      run: |
        echo "Running Safety check"
        safety check --json --output safety-report.json || true
        
        # Echo the report content 
        echo "Safety report content:"
        cat safety-report.json || echo "No report generated"

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Docker Build and Push
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=long,prefix=

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Dashboard image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dashboard
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-dashboard:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Pull Docker images
      run: |
        docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-dashboard:${{ github.sha }}

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit

  # Deployment to Staging
  deploy-staging:
    needs: [build, integration]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # This could be kubectl, docker-compose, or other deployment tools
  
  # Deployment to Production
  deploy-production:
    needs: [build, integration]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
        name: id_rsa
        config: |
          Host production
            HostName ${{ secrets.SERVER_IP }}
            User ${{ secrets.SERVER_USER }}
            IdentityFile ~/.ssh/id_rsa

    - name: Deploy Docker Stack to Production
      run: |
        echo "Deploying to production..."
        
        # Transfer deployment files
        scp docker-compose.production.yml production:/opt/trading-platform/
        scp deploy.sh production:/opt/trading-platform/
        
        # Execute deployment script
        ssh production "cd /opt/trading-platform && chmod +x deploy.sh && ./deploy.sh \
          TAG=${{ github.sha }} \
          DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }} \
          REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }} \
          JWT_SECRET_KEY=${{ secrets.PROD_JWT_SECRET }} \
          API_SECRET_KEY=${{ secrets.PROD_API_SECRET }}"
        
        echo "Deployment completed"

    - name: Run Health Check
      run: |
        echo "Running health check on deployed application"
        # Wait for services to be available
        sleep 30
        # Run health check against API endpoint
        curl -f https://api.example.com/health || exit 1

  # Documentation Build
  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        
    - name: Build documentation
      run: |
        echo "Setting up directories"
        mkdir -p docs/_static docs/_templates docs/_build
        
        echo "Files in docs directory:"
        ls -la docs/
        
        echo "Building documentation"
        cd docs
        make html
        
    - name: Deploy documentation to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
