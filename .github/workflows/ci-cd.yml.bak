name: Trading Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy

    - name: Code formatting check
      run: |
        black --check --diff src/ tests/

    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/trading_platform_test
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python -c "import sys; print(sys.path)"
        echo "Current directory: $(pwd)"
        echo "File structure:"
        ls -la
        echo "Testing directory structure:"
        ls -la tests/
        echo "Running tests with verbose output:"
        pytest tests/ -v --tb=native --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        echo "Running Bandit security scan with configuration"
        bandit -r src/ -f json -o bandit-report.json -c .bandit.yaml || true
        
        # Echo the report content
        echo "Bandit report content:"
        cat bandit-report.json || echo "No report generated"

    - name: Run Safety check
      run: |
        echo "Running Safety check"
        safety check --json --output safety-report.json || true
        
        # Echo the report content 
        echo "Safety report content:"
        cat safety-report.json || echo "No report generated"

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Docker Build and Push
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push main application
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push dashboard
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dashboard
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-dashboard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        ENVIRONMENT=test
        DB_PASSWORD=test_password
        REDIS_PASSWORD=test_redis_password
        JWT_SECRET_KEY=test_jwt_secret
        API_SECRET_KEY=test_api_secret
        GRAFANA_ADMIN_PASSWORD=test_grafana_password
        EOF

    - name: Run integration tests
      run: |
        # Update docker-compose to use built images
        sed -i "s|trading-platform:latest|${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" docker-compose.yml
        sed -i "s|trading-dashboard:latest|${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-dashboard:${{ github.sha }}|g" docker-compose.yml
        
        # Start services
        docker-compose --env-file .env.test up -d
        
        # Wait for services to be ready
        sleep 60
        
        # Run integration tests
        docker-compose exec -T trading_app python -m pytest tests/integration/ -v
        
        # Clean up
        docker-compose down -v
  # Deployment to Staging
  deploy-staging:
    needs: [build, integration]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be kubectl, docker-compose, or other deployment tools  # Deployment to Production
  deploy-production:
    needs: [build, integration]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get tag version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
        
    - name: Create production deployment file
      run: |
        cat > docker-compose.production.yml << EOF
        version: '3.9'
        
        services:
          trading_app:
            image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
            restart: always
            environment:
              - ENVIRONMENT=production
              - LOG_LEVEL=INFO
              - REDIS_URL=redis://redis:6379/0
              - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/trading_platform
            volumes:
              - trading_data:/app/data
              - ./secrets:/app/secrets:ro
            depends_on:
              - redis
              - postgres
            networks:
              - trading_network
              
          trading_dashboard:
            image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-dashboard:${{ steps.get_version.outputs.VERSION }}
            restart: always
            environment:
              - ENVIRONMENT=production
              - TRADING_API_URL=http://trading_app:8000
            ports:
              - "8501:8501"
            depends_on:
              - trading_app
            networks:
              - trading_network
              
          postgres:
            image: postgres:15-alpine
            restart: always
            environment:
              - POSTGRES_PASSWORD=${DB_PASSWORD}
              - POSTGRES_DB=trading_platform
            volumes:
              - postgres_data:/var/lib/postgresql/data
            networks:
              - trading_network
              
          redis:
            image: redis:7-alpine
            restart: always
            command: redis-server --requirepass ${REDIS_PASSWORD}
            volumes:
              - redis_data:/data
            networks:
              - trading_network
              
          nginx:
            image: nginx:latest
            restart: always
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
              - ./ssl:/etc/nginx/ssl:ro
            depends_on:
              - trading_app
              - trading_dashboard
            networks:
              - trading_network
              
        volumes:
          trading_data:
          postgres_data:
          redis_data:
          
        networks:
          trading_network:
        EOF
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          mkdir -p ~/trading-platform
          cd ~/trading-platform
          
          # Create production .env file
          cat > .env << EOF
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          API_SECRET_KEY=${{ secrets.API_SECRET_KEY }}
          EOF
          
          # Copy files from repository
          echo "Copying deployment files..."
          
    - name: Upload docker-compose file
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        source: "docker-compose.production.yml,nginx/nginx.conf"
        target: "~/trading-platform"
        
    - name: Start production services
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd ~/trading-platform
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d
          
    - name: Verify deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd ~/trading-platform
          echo "Checking container status..."
          docker-compose -f docker-compose.production.yml ps
          echo "Checking application logs..."
          docker-compose -f docker-compose.production.yml logs --tail=50 trading_app

  # Performance Testing
  performance:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js for Artillery
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run performance tests
      run: |
        # Create a simple performance test config
        cat > performance-test.yml << EOF
        config:
          target: 'http://localhost:8000'
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: "API Health Check"
            flow:
              - get:
                  url: "/health"
          - name: "Portfolio Status"
            flow:
              - get:
                  url: "/api/v1/portfolio/status"
                  headers:
                    Authorization: "Bearer test-token"
        EOF
        
        # Start the application
        docker-compose up -d trading_api
        sleep 30
        
        # Run performance tests
        artillery run performance-test.yml --output performance-report.json
        
        # Generate HTML report
        artillery report performance-report.json

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: |
          performance-report.json
          performance-report.json.html

  # Documentation
  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        
    - name: Build documentation
      run: |
        echo "Setting up directories"
        mkdir -p docs/_static docs/_templates docs/_build
        
        echo "Files in docs directory:"
        ls -la docs/
        
        echo "Building documentation"
        cd docs
        make html
        
        echo "Documentation build logs:"
        cat _build/html/output.log || echo "No build log available"

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # Cleanup
  cleanup:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # Add cleanup commands for old images/artifacts
