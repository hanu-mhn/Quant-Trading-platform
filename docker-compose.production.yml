# Production-ready docker-compose configuration for Quantitative Trading Platform
# Copyright Â© 2025 Malavath Hanmanth Nayak. All rights reserved.
# Developer: Malavath Hanmanth Nayak
# Contact: hanmanthnayak.95@gmail.com
# Version: 2.0

services:
  trading_app:
    build:
      context: .
      dockerfile: Dockerfile.production
    restart: always
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/0
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/trading_platform
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key}
      - API_SECRET_KEY=${API_SECRET_KEY:-your_api_secret_key}
    volumes:
      - trading_data:/app/data
      - ./secrets:/app/secrets:ro
    depends_on:
      - redis
      - postgres
    networks:
      - trading_network

  trading_dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard.production
    restart: always
    environment:
      - ENVIRONMENT=production
      - TRADING_API_URL=http://trading_app:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - PYTHONPATH=/app
    ports:
      - "8501:8501"
    depends_on:
      - trading_app
    networks:
      - trading_network
      
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=trading_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading_network
      
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading_network
      
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - trading_app
      - trading_dashboard
    networks:
      - trading_network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: always
    networks:
      - trading_network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    restart: always
    depends_on:
      - prometheus
    networks:
      - trading_network

volumes:
  trading_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  
networks:
  trading_network:
    driver: bridge
